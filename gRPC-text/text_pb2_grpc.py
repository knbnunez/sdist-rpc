# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import text_pb2 as text__pb2


class TextServiceStub(object):
    """Definición de un servicio
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SaveText = channel.unary_unary(
                '/TextService/SaveText',
                request_serializer=text__pb2.TextRequest.SerializeToString,
                response_deserializer=text__pb2.TextResponse.FromString,
                )
        self.GetTextTimestamp = channel.unary_unary(
                '/TextService/GetTextTimestamp',
                request_serializer=text__pb2.TextIndex.SerializeToString,
                response_deserializer=text__pb2.TextResponse.FromString,
                )


class TextServiceServicer(object):
    """Definición de un servicio
    """

    def SaveText(self, request, context):
        """Definición de sus procedimientos: están implementados en server.py
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetTextTimestamp(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_TextServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'SaveText': grpc.unary_unary_rpc_method_handler(
                    servicer.SaveText,
                    request_deserializer=text__pb2.TextRequest.FromString,
                    response_serializer=text__pb2.TextResponse.SerializeToString,
            ),
            'GetTextTimestamp': grpc.unary_unary_rpc_method_handler(
                    servicer.GetTextTimestamp,
                    request_deserializer=text__pb2.TextIndex.FromString,
                    response_serializer=text__pb2.TextResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'TextService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class TextService(object):
    """Definición de un servicio
    """

    @staticmethod
    def SaveText(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TextService/SaveText',
            text__pb2.TextRequest.SerializeToString,
            text__pb2.TextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetTextTimestamp(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/TextService/GetTextTimestamp',
            text__pb2.TextIndex.SerializeToString,
            text__pb2.TextResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
